"""add workspace subscriptions

Revision ID: e42794fc370b
Revises: fbde19d806a3
Create Date: 2025-07-29 13:22:50.562692

"""

from __future__ import annotations

import sqlalchemy as sa
from alembic import context, op
from edgy import monkay, run_sync


# revision identifiers, used by Alembic.
revision = 'e42794fc370b'
down_revision = 'fbde19d806a3'
branch_labels = None
depends_on = None


def hash_to_identifier(key: str | bytes) -> str:
    from base64 import b32encode
    from hashlib import blake2b
    if isinstance(key, str):
        key = key.encode()
    return f"_{b32encode(blake2b(key, digest_size=16).digest()).decode().rstrip('=')}"

force_fields_nullable: list[tuple[str, str]] = []

def upgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"upgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()


def downgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"downgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()




def upgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('service_plans',
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.Enum('essential', 'advanced', 'business', name='serviceplantype'), autoincrement=False, nullable=False),
    sa.Column('period', sa.Enum('monthly', 'yearly', name='serviceplanperiod'), autoincrement=False, nullable=False),
    sa.Column('price', sa.Float(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.String(length=3), server_default=sa.text("'EUR'"), autoincrement=False, nullable=False),
    sa.Column('description', sa.Text(), autoincrement=False, nullable=True),
    sa.Column('stripe_product_id', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('stripe_price_id', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_price_id'),
    sa.UniqueConstraint('stripe_product_id')
    )
    op.create_table('service_taxes',
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('rate', sa.Float(), autoincrement=False, nullable=False),
    sa.Column('country_code', sa.String(length=2), autoincrement=False, nullable=True),
    sa.Column('description', sa.Text(), autoincrement=False, nullable=True),
    sa.Column('stripe_id', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_id')
    )
    op.create_table('workspace_subscriptions',
    sa.Column('workspace', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('service_plan', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.Enum('incomplete', 'incomplete_expired', 'trialing', 'active', 'past_due', 'canceled', 'unpaid', 'paused', name='subscriptionstatus'), autoincrement=False, nullable=False),
    sa.Column('available_users_count', sa.Integer(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('trial_start', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('trial_end', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('cancel_at_period_end', sa.Boolean(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('canceled_at', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['service_plan'], ['service_plans.id'], name='fk_workspace_subscriptions_service_plans_service_plan', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['workspace'], ['workspaces.id'], name='fk_workspace_subscriptions_workspaces_workspace', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_subscription_id')
    )
    with op.batch_alter_table('workspaces', schema=None) as batch_op:
        batch_op.add_column(sa.Column('plan', sa.Enum('essential', 'advanced', 'business', name='serviceplantype'), server_default=sa.text("'essential'"), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('service_plan', sa.Integer(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('fk_workspaces_service_plans_service_plan', 'service_plans', ['service_plan'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')

    op.create_enum('serviceplantype', ['essential', 'advanced', 'business'])
    op.create_enum('serviceplanperiod', ['monthly', 'yearly'])
    op.create_enum('subscriptionstatus', ['incomplete', 'incomplete_expired', 'trialing', 'active', 'past_due', 'canceled', 'unpaid', 'paused'])
    # ### end Alembic commands ###
    if not context.is_offline_mode():
        try:
            with monkay.instance.registry.with_async_env():
                run_sync(
                    monkay.instance.registry.apply_default_force_nullable_fields(
                        force_fields_nullable=force_fields_nullable,
                        filter_db_name="",
                        model_defaults={}
                    )
                )
        except Exception as exc:
            print("failure migrating defaults", exc)


def downgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_enum('subscriptionstatus', ['incomplete', 'incomplete_expired', 'trialing', 'active', 'past_due', 'canceled', 'unpaid', 'paused'])
    op.drop_enum('serviceplanperiod', ['monthly', 'yearly'])
    op.drop_enum('serviceplantype', ['essential', 'advanced', 'business'])
    with op.batch_alter_table('workspaces', schema=None) as batch_op:
        batch_op.drop_constraint('fk_workspaces_service_plans_service_plan', type_='foreignkey')
        batch_op.drop_column('service_plan')
        batch_op.drop_column('plan')

    op.drop_table('workspace_subscriptions')
    op.drop_table('service_taxes')
    op.drop_table('service_plans')
    # ### end Alembic commands ###

