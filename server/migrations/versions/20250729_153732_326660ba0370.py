"""fix unique indexes of service plans

Revision ID: 326660ba0370
Revises: e42794fc370b
Create Date: 2025-07-29 15:37:32.128222

"""

from __future__ import annotations

import sqlalchemy as sa
from alembic import context, op
from edgy import monkay, run_sync


# revision identifiers, used by Alembic.
revision = '326660ba0370'
down_revision = 'e42794fc370b'
branch_labels = None
depends_on = None


def hash_to_identifier(key: str | bytes) -> str:
    from base64 import b32encode
    from hashlib import blake2b
    if isinstance(key, str):
        key = key.encode()
    return f"_{b32encode(blake2b(key, digest_size=16).digest()).decode().rstrip('=')}"

force_fields_nullable: list[tuple[str, str]] = []

def upgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"upgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()


def downgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"downgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()




def upgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('service_plans', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('service_plans_stripe_price_id_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('service_plans_stripe_product_id_key'), type_='unique')
        batch_op.create_unique_constraint('uc_BZRZHN3Y72AOYZLBUQEHKZCPHU', ['period', 'type'])
        batch_op.create_unique_constraint('uc_XASMQ6EYRDOCFCS7YHXCPBMMN4', ['stripe_price_id', 'stripe_product_id'])

    # ### end Alembic commands ###
    if not context.is_offline_mode():
        try:
            with monkay.instance.registry.with_async_env():
                run_sync(
                    monkay.instance.registry.apply_default_force_nullable_fields(
                        force_fields_nullable=force_fields_nullable,
                        filter_db_name="",
                        model_defaults={}
                    )
                )
        except Exception as exc:
            print("failure migrating defaults", exc)


def downgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('service_plans', schema=None) as batch_op:
        batch_op.drop_constraint('uc_XASMQ6EYRDOCFCS7YHXCPBMMN4', type_='unique')
        batch_op.drop_constraint('uc_BZRZHN3Y72AOYZLBUQEHKZCPHU', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('service_plans_stripe_product_id_key'), ['stripe_product_id'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('service_plans_stripe_price_id_key'), ['stripe_price_id'], postgresql_nulls_not_distinct=False)

    # ### end Alembic commands ###

