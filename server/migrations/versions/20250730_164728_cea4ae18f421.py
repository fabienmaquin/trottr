"""empty message

Revision ID: cea4ae18f421
Revises: 56a7e32e90ae
Create Date: 2025-07-30 16:47:28.538058

"""

from __future__ import annotations

import sqlalchemy as sa
from alembic import context, op
from edgy import monkay, run_sync


# revision identifiers, used by Alembic.
revision = 'cea4ae18f421'
down_revision = '56a7e32e90ae'
branch_labels = None
depends_on = None


def hash_to_identifier(key: str | bytes) -> str:
    from base64 import b32encode
    from hashlib import blake2b
    if isinstance(key, str):
        key = key.encode()
    return f"_{b32encode(blake2b(key, digest_size=16).digest()).decode().rstrip('=')}"

force_fields_nullable: list[tuple[str, str]] = []

def upgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"upgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()


def downgrade(engine_name: str = "") -> None:
    # hash_to_identifier adds already an "_"
    fn = globals().get(f"downgrade{hash_to_identifier(engine_name)}")
    if fn is not None:
        fn()




def upgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('job_task',
    sa.Column('name', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('sequence', sa.Integer(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('description', sa.Text(), autoincrement=False, nullable=True),
    sa.Column('default_price', sa.Float(), server_default=sa.text('0.0'), autoincrement=False, nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('workspace', sa.Integer(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workspace'], ['workspaces.id'], name='fk_job_task_workspaces_workspace', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('job_job_task',
    sa.Column('name', sa.String(length=255), autoincrement=False, nullable=False),
    sa.Column('sequence', sa.Integer(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('description', sa.Text(), autoincrement=False, nullable=True),
    sa.Column('is_done', sa.Boolean(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('done_at', sa.DateTime(timezone=True), autoincrement=False, nullable=True),
    sa.Column('done_by', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('job', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('job_task', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), autoincrement=False, nullable=False),
    sa.Column('workspace', sa.Integer(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['done_by'], ['users.id'], name='fk_job_job_task_users_done_by', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['job'], ['job.id'], name='fk_job_job_task_job_job', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['job_task'], ['job_task.id'], name='fk_job_job_task_job_task_job_task', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['workspace'], ['workspaces.id'], name='fk_job_job_task_workspaces_workspace', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    if not context.is_offline_mode():
        try:
            with monkay.instance.registry.with_async_env():
                run_sync(
                    monkay.instance.registry.apply_default_force_nullable_fields(
                        force_fields_nullable=force_fields_nullable,
                        filter_db_name="",
                        model_defaults={}
                    )
                )
        except Exception as exc:
            print("failure migrating defaults", exc)


def downgrade_ZLTGSQOZ566UATSNRB2Y5JTWOA():
    # Migration of:
    # main database
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('job_job_task')
    op.drop_table('job_task')
    # ### end Alembic commands ###

